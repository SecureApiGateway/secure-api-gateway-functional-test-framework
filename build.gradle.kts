import org.gradle.api.tasks.testing.logging.TestExceptionFormat

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 */

/*
 * Global Variables
 */
// project version
// pom artifact version used when the built artifact is published
version = "2.2.0"
// Test jar library version used in the task 'generateTestJar'
val release = "2.2.0"
val jaxbVersion = "4.0.1"

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM.
    id("org.jetbrains.kotlin.jvm") version "1.9.22"
    // https://github.com/edeandrea/xjc-generation-gradle-plugin
    id("com.github.edeandrea.xjc-generation") version "1.6"
    id("maven-publish")
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

/*
 * In case that we publish the artifact
 */
publishing {
    publications {
        register("secure-api-gateway-functional-test-framework", MavenPublication::class) {
            pom {
                name.set("secure-api-gateway-functional-test-framework")
                groupId = "com.forgerock.sapi.gateway"
                artifactId = "secure-api-gateway-functional-test-framework"
                version = project.version.toString()
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven("https://www.jitpack.io")
    maven("https://maven.forgerock.org/artifactory/community")
}

configurations.all {
    exclude("org.springframework.boot")
    exclude("org.springframework.data")
    exclude("org.springframework.plugin")
    exclude("io.springfox")
    exclude("io.swagger.core")
    exclude("io.swagger")
    exclude("org.projectlombok")
    exclude("org.slf4")
}

dependencies {
    // xjc generation plugin dependencies
    xjc("jakarta.xml.bind:jakarta.xml.bind-api:${jaxbVersion}")
    xjc("com.sun.xml.bind:jaxb-impl:${jaxbVersion}")
    xjc("com.sun.xml.bind:jaxb-xjc:${jaxbVersion}")

    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
    implementation(platform("com.forgerock.sapi.gateway:secure-api-gateway-ob-uk-common-bom:2.3.0-SNAPSHOT"))
    implementation("com.forgerock.sapi.gateway:secure-api-gateway-ob-uk-common-shared")
    implementation("com.forgerock.sapi.gateway:secure-api-gateway-ob-uk-common-obie-datamodel")
    implementation("com.forgerock.sapi.gateway:secure-api-gateway-ob-uk-common-datamodel")
    implementation("com.forgerock.sapi.gateway:secure-api-gateway-ob-uk-common-error")
    implementation("com.forgerock.sapi.gateway:secure-api-gateway-ob-uk-common-obie-datamodel:jar:tests")
    implementation("com.forgerock.sapi.gateway:secure-api-gateway-ob-uk-common-datamodel:jar:tests")

    implementation("org.bouncycastle:bcprov-jdk15on:1.70")
    implementation("org.bouncycastle:bcpkix-jdk15on:1.70")

    implementation("jakarta.xml.bind:jakarta.xml.bind-api:${jaxbVersion}")
    implementation("com.sun.xml.bind:jaxb-impl:${jaxbVersion}")

    implementation("com.github.kittinunf.fuel:fuel:2.2.1")
    implementation("com.github.kittinunf.fuel:fuel-jackson:2.2.1")
    implementation("com.github.kittinunf.fuel:fuel-gson:2.2.1")
    implementation("com.google.code.gson:gson:2.9.0")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-joda:2.9.8")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.16.1")
    implementation("com.willowtreeapps.assertk:assertk-jvm:0.17")
    implementation("io.jsonwebtoken:jjwt-api:0.10.7")
    implementation("io.jsonwebtoken:jjwt-impl:0.10.7")
    implementation("io.jsonwebtoken:jjwt-jackson:0.10.7")
    implementation("io.r2:simple-pem-keystore:0.3")
    implementation("org.apache.httpcomponents:httpclient:4.5.9")
    implementation("org.assertj:assertj-core:3.13.2")
    implementation("com.nimbusds:nimbus-jose-jwt:9.0.1")
    implementation("commons-io:commons-io:2.6")

    testImplementation("org.mockito:mockito-core:5.10.0")
    implementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
    implementation("org.junit.jupiter:junit-jupiter-params:5.7.0")
    implementation("com.sksamuel.hoplite:hoplite-core:2.7.5")
    implementation("com.sksamuel.hoplite:hoplite-json:2.7.5")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.2")
}

/*
 * Generate the payment objects from defined schema
 */
xjcGeneration {
    defaultBindingFile = null
    schemas.register("schema-pain.001.001.08")
    schemas {
        "schema-pain.001.001.08" {
            taskName = "gen-pain00100108-source"
            schemaRootDir = "src/main/resources/com/forgerock/sapi/gateway/ob/uk/payment/file"
            schemaFile = "pain.001.001.08.xsd"
            // In local environment run first the task schemaGen-xxx or xjcGeneration to generate the objects
            // Remember use this package in kotlin test to resolve the object reference
            // @see line 92 from FilePaymentTest.kt
            javaPackageName = "com.forgerock.sapi.gateway.ob.uk.generated.xml.model.pain00100108"
        }
    }
}

configure<SourceSetContainer> {
    named("main") {
        java.srcDir("src/main/kotlin")
    }
}

/**
 ********************************************************************
 * TASKS
 ********************************************************************
 */


/*
 * scope generic tasks
 */
tasks {
    test {
        useJUnitPlatform()
        description = "Runs ALL tests"
    }
}

// To generate the tests library
tasks.register<Jar>("generateTestJar") {
    group = "specific"
    description = "Generate a non-executable jar library tests"
    archiveClassifier.set("tests")
    archiveFileName.set("${project.name}-${project.version}-$release.jar")
    from(sourceSets.test.get().allSource)
    from(sourceSets.main.get().allSource)
    dependsOn("testClasses")
    manifest {
        attributes(
            mapOf(
                "Specification-Title" to "Secure API Gateway Functional Tests",
                "Implementation-Title" to project.name,
                "Implementation-Version" to project.version,
                "Created-by" to "${project.version} (forgerock)",
                "Built-by" to System.getProperty("user.name"),
                "Build-Jdk" to JavaVersion.current(),
                "Source-Compatibility" to project.properties["sourceCompatibility"],
                "Target-Compatibility" to project.properties["targetCompatibility"]
            )
        )
    }
}

tasks.withType<Test>().configureEach {
    useJUnitPlatform()
    println("RUNNING task [$name]")

    // execution conditions (see readme file)
    systemProperty("junit.platform.output.capture.stdout", "true")
    systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")
    /* execution properties */
    // Indicates if this task will fail on the first failed test
    failFast = false
    minHeapSize = "512M"
    maxHeapSize = "2G"
    // You can run your tests in parallel by setting this property to a value greater than 1
    // default value when isn't set in the task
    maxParallelForks = 1
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = TestExceptionFormat.FULL

    // Disable test output caching as these are integration tests and therefore are environment dependent
    outputs.upToDateWhen { false }
}
